class Solution {
  public:
  
    Node* reverseList(Node* head) {
        Node* prev = nullptr;
        Node* curr = head;
        while (curr != nullptr) {
            Node* nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    Node* removeLeadingZeros(Node* head) {
        while (head != nullptr && head->data == 0) {
            head = head->next;
        }
        return (head == nullptr) ? new Node(0) : head;
    }

    Node* addTwoLists(Node* head1, Node* head2) {
       
        head1 = removeLeadingZeros(head1);
        head2 = removeLeadingZeros(head2);

       
        head1 = reverseList(head1);
        head2 = reverseList(head2);

       
        Node* dummy = new Node(0);
        Node* temp = dummy;
        int carry = 0;

        while (head1 != nullptr || head2 != nullptr || carry > 0) {
            int sum = carry;
            if (head1 != nullptr) {
                sum += head1->data;
                head1 = head1->next;
            }
            if (head2 != nullptr) {
                sum += head2->data;
                head2 = head2->next;
            }

            carry = sum / 10;
            sum = sum % 10;

            temp->next = new Node(sum);
            temp = temp->next;
        }

       
        Node* result = reverseList(dummy->next);

      
        result = removeLeadingZeros(result);

        return result;
    }
};
